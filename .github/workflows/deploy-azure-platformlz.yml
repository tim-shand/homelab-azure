name: Terraform-Deploy_Platform-LZ

# Triggers
on:
  push:
    branches:
      - main # Trigger the workflow on commits to the main branch.
    paths:
      - 'deployments/mgt-platform-lz/**' # Only trigger for changes in the deployment directory.
  pull_request:
    branches:
      - main # Trigger the workflow on pull requests to the main branch.
    paths:
      - 'deployments/mgt-platform-lz/**' # Only trigger for changes in the deployment directory.
  workflow_dispatch: # Manual run.
    inputs:
      action:
        description: 'Deployment Type'
        required: true
        default: 'Plan'
        type: choice
        options:
          - 'Plan'
          - 'Plan-Apply'
          - 'Destroy'

permissions:
  id-token: write   # required for OIDC
  contents: read    # required for checkout

# Jobs
jobs:
  terraform:
    name: "Terraform Deployment (Azure OIDC)"
    runs-on: ubuntu-latest # Use the latest Ubuntu runner.

    env: # Set environment variables for runner.
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }} # Use GitHub Secrets for sensitive data.
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }} # Azure Platform Subscription ID
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }} # Service Principal Client ID
      ARM_USE_OIDC: ${{ secrets.ARM_USE_OIDC }} # Use OIDC for authentication
      TF_BACKEND_RG_NAME: ${{ vars.TF_BACKEND_RG_NAME }} # Terraform Backend: Resource Group
      TF_BACKEND_SA_NAME: ${{ vars.TF_BACKEND_SA_NAME }} # Terraform Backend: Storage Account
      TF_BACKEND_CN_NAME: ${{ vars.TF_BACKEND_CN_NAME }} # Terraform Backend: Container
      CONFIG_DIRECTORY: "./deployments/mgt-platform-lz" # Directory containing Terraform configuration files.
      TFVARS_FILE: "platform-lz.tfvars"
      TFSTATE_FILE: "platform-lz.tfstate"

    defaults:
      run:
        working-directory: ${{ env.CONFIG_DIRECTORY }}

    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Terraform: Setup"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.1

      - name: "Terraform: Init"
        run: |
          terraform init -backend-config="resource_group_name=$TF_BACKEND_RG_NAME" \
          -backend-config="storage_account_name=$TF_BACKEND_SA_NAME" \
          -backend-config="container_name=$TF_BACKEND_CN_NAME" \
          -backend-config="key=$TFSTATE_FILE"

      - name: "Terraform: Plan"
        if: ${{ github.event.inputs.action == 'Plan' }}
        run: |
          terraform plan -out=tfplan -var-file=$TFVARS_FILE \
          -var="azure_tenant_id=$ARM_TENANT_ID" \
          -var="subscription_id=$ARM_SUBSCRIPTION_ID"

      - name: "Terraform: Apply"
        if: ${{ github.event.inputs.action == 'Plan-Apply' }}
        run: |
          terraform plan -out=tfplan -var-file=$TFVARS_FILE
          terraform apply --auto-approve -input=false tfplan

      - name: "Terraform: Destroy"
        if: ${{ github.event.inputs.action == 'Destroy' }}
        run: |
          terraform destroy --auto-approve -var-file=$TFVARS_FILE
